
; 64tass Turbo Assembler Macro V1.58.2974 listing file
; 64tass -I . -C -Wall -Werror -Wno-shadow -x --verbose-list -b -L bitmap_ex.lst -o bitmap_ex.bin bitmap_ex.asm
; Sat May 18 14:58:36 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: bitmap_ex.asm

					; Sample bitmap instantiation code for the F256 platform (400 lines)
					;
					; Developed by Michael Weitman leveraging code from:
					;  F256Manual by pweingar
					;  'balls' demo by Stephen Edwards (frame code)

					; See issue #16 (published May 31, 2024) of Foenix Rising
					; for more on this topic http://apps.emwhite.org/foenixmarketplace
					;
					; DISCLAIMERS:
					; This code was derived from the full 'Foenix Balls' demo, and done
					; so with haste; therefore, there may be one or more "1-off" errors
					; within.
					; Also note; this code will not produce a PGX/PGZ or autorun header;
					; instead, it will produce a .bin file which must be pushed into your
					; machine @ $E000 using the Foenix Uploader
					; Assembler directives are for 64TASS

					*= $E000

					.cpu    "w65c02"

					;VICKY specific defs
=$0000					MMU_MEM_CTRL    = $0000     ; MMU Memory Control Register
=$0001					MMU_IO_CTRL     = $0001     ; MMU I/O Control Register

=$d000					VKY_MSTR_CTRL_0 = $D000     ; Vicky Master Control Register 0
=$d001					VKY_MSTR_CTRL_1 = $D001     ; Vicky Master Control Register 1

=$d002					VKY_LAYER_CTRL_0= $D002
=$d003					VKY_LAYER_CTRL_1= $D003

=$d004					BORDER_CTRL_REG = $D004

=$d100					VKY_BM0_CTRL    = $D100     ; Bitmap #0 Control Register
=$d101					VKY_BM0_ADDR_L  = $D101     ; Bitmap #0 Address bits 7..0
=$d102					VKY_BM0_ADDR_M  = $D102     ; Bitmap #0 Address bits 15..8
=$d103					VKY_BM0_ADDR_H  = $D103     ; Bitmap #0 Address bits 17..16

=$d108					VKY_BM1_CTRL    = $D108

=$01					Mstr_Ctrl_Text_Mode_En = $01 ; Enable Text Mode

					;App specific defines
=$0000					bitmap_base     = $0000

=256					COLUMNS	        = 256		; Number of columns/bytes per row (a friendly # which is 32 : 256 : 32 = 320 pixel screen)
=$ff					COLOR1	        = $FF       ; FOENIX Purple color aka #106 #13 #173 aka $6A0DAD, instanciated below as collor 255

=$08					MMU_MEM_BANK_0  = $08       ; $1:0000
=$09					MMU_MEM_BANK_1  = $09       ; $1:2000
=$0a					MMU_MEM_BANK_2  = $0a       ; $1:4000
=$0b					MMU_MEM_BANK_3  = $0b       ; $1:6000
=$0c					MMU_MEM_BANK_4  = $0c       ; $1:8000
=$0d					MMU_MEM_BANK_5  = $0d       ; $1:a000
=$0e					MMU_MEM_BANK_6  = $0e       ; $1:c000
=$0f					MMU_MEM_BANK_7  = $0f       ; $1:e000 < most but not all of this last bank is used.  Our bitmap screen of 320x200 = 64,000 bytes
					                            ;           which is $f9ff; the last 4.8 scan lines of the memory bank do not 'fit' on the screen : )

					* = $0
>0000					.fill           16          ; Reserved
					.dsection       zp          ; declare section for zero page (from $0)

					* = $e000
					.dsection kernel            ; declare section for 'kernel' (from $e00x)
					.dsection program           ; declare section for program (follows above)

					* = $fffa ; Hardware vectors.
>fffa	00 e0				.word   platform.hw_nmi
>fffc	02 e0				.word   platform.hw_reset
>fffe	01 e0				.word   platform.hw_irq

					platform .namespace

					.section zp ; start
					; zero page addresses will be dynamically inserted following the reserved above

>0010					pointer         .word ?
>0012					defcolor        .byte ?
>0013					pencolor        .byte ?
>0014					line            .byte ?
>0015					bm_bank         .byte ?
>0016					column          .word ?
>0018					gbase_lo        .byte ?
>0019					gbase_hi        .byte ?
					.send

					.section kernel

					; kernel section; of course there is no kernel, so this is our kernel.  This code begins at $E002 and the
					;   address of hw_reset is aligned with the reset vector via the .word platform.hw_reset compiler directive above
					;
					; The hw_reset is the start of program and the jmp loop is the end.  There is no input or output.
					;
					; WHAT IS THIS ALL ABOUT ?!
					;
					; This is a bitmap example which instantiates bitmap mode @ 320x200, establishes a gradiant palette, overwrites the
					; last color in the palette with a custom color (purple), paints the bitmap screen with pixels ranging in creme in color
					; to a light lime green, then draws a purple frame.

.e000					hw_nmi
.e000	40		rti		rti
.e001					hw_irq
.e001	40		rti		rti
.e002					hw_reset:

					; Code execution begins here

.e002	64 01		stz $01		            stz MMU_IO_CTRL
.e004	a9 01		lda #$01	            lda #Mstr_Ctrl_Text_Mode_En         ; text mode (for now)
.e006	8d 00 d0	sta $d000	            sta VKY_MSTR_CTRL_0
.e009	9c 04 d0	stz $d004	            stz BORDER_CTRL_REG                 ; zero disables the border

.e00c	a9 01		lda #$01	            lda #$01                            ; switch to feature bank 1 of I/O for palette manipulation
.e00e	85 01		sta $01		            sta MMU_IO_CTRL
.e010	a9 00		lda #$00	            lda #<VKY_MSTR_CTRL_0               ; initalize 'pointer' to $d000; note that this is the same base
.e012	85 10		sta $10		            sta pointer                         ;   address as the VICKY Master Control Register but we are in bank 1 now !!
.e014	a9 d0		lda #$d0	            lda #>VKY_MSTR_CTRL_0               ;   IT IS EASY TO GET CONFUSED !!

.e016	85 11		sta $11		            sta pointer+1
.e018	a2 00		ldx #$00	            ldx #$00

.e01a					lut_loop:
.e01a	a0 00		ldy #$00	            ldy #$00
.e01c	8a		txa		            txa
.e01d	49 ff		eor #$ff	            eor #$ff
.e01f	91 10		sta ($10),y	            sta (pointer),y
.e021	c8		iny		            iny
.e022	a9 e0		lda #$e0	            lda #$E0  ; green
.e024	91 10		sta ($10),y	            sta (pointer),y
.e026	c8		iny		            iny
.e027	8a		txa		            txa
.e028	49 ff		eor #$ff	            eor #$ff
.e02a	1a		inc a		            inc a
.e02b	91 10		sta ($10),y	            sta (pointer),y
.e02d	c8		iny		            iny
.e02e	e8		inx		            inx
.e02f	f0 0f		beq $e040	            beq lut_done
.e031	18		clc		            clc
.e032	a5 10		lda $10		            lda pointer
.e034	69 04		adc #$04	            adc #$04
.e036	85 10		sta $10		            sta pointer
.e038	a5 11		lda $11		            lda pointer+1
.e03a	69 00		adc #$00	            adc #$00
.e03c	85 11		sta $11		            sta pointer+1
.e03e	80 da		bra $e01a	            bra lut_loop
.e040					lut_done
.e040	a9 ad		lda #$ad	            lda #173            ; this is our customer purple color aka $6A0DAD
.e042	8d fc d3	sta $d3fc	            sta $D3fc
.e045	a9 0d		lda #$0d	            lda #13
.e047	8d fd d3	sta $d3fd	            sta $D3fd
.e04a	a9 6a		lda #$6a	            lda #106
.e04c	8d fe d3	sta $d3fe	            sta $D3fe

					; layer setup
.e04f	64 01		stz $01		            stz MMU_IO_CTRL     ; back in feature bank 0 of I/O aka, most of the graphics registers
.e051	a9 40		lda #$40	            lda #$40            ; config for a simple tile map 0 @ layer 1 (not used); bitmap 0 at layer 0 (used)
.e053	8d 02 d0	sta $d002	            sta VKY_LAYER_CTRL_0
.e056	a9 01		lda #$01	            lda #$01            ; config for bitmap 1 at layer 2 (not used)
.e058	8d 03 d0	sta $d003	            sta VKY_LAYER_CTRL_1

					; instantiate graphic mode
.e05b	a9 2c		lda #$2c	            lda #$2C            ;2 (bit 5) turns sprites on; C (bits 3 and 2) turn bitmap and graphics on
.e05d	8d 00 d0	sta $d000	            sta VKY_MSTR_CTRL_0 ; Save that to VICKY master control register 0

.e060	a9 01		lda #$01	            lda #$01            ;1 (bit 0) enables CLK_70 mode which is 70 Hz. (640x400 text and 320 x 200 graphics)
.e062	8d 01 d0	sta $d001	            sta VKY_MSTR_CTRL_1 ; Make sure we창<80><99>re just in 320x200 mode (VICKY master control register 1)

					; Turn on bitmap #0
.e065	9c 08 d1	stz $d108	            stz VKY_BM1_CTRL    ; We are not using bitmap 1

.e068	a9 01		lda #$01	            lda #$01            ; Use graphics LUT #0, and enable bitmap
.e06a	8d 00 d1	sta $d100	            sta VKY_BM0_CTRL

.e06d	a9 00		lda #$00	            lda #<bitmap_base   ; Set the low byte of the bitmap창<80><99>s address
.e06f	8d 01 d1	sta $d101	            sta VKY_BM0_ADDR_L
.e072	a9 00		lda #$00	            lda #>bitmap_base   ; Set the middle byte of the bitmap창<80><99>s address
.e074	8d 02 d1	sta $d102	            sta VKY_BM0_ADDR_M
.e077	a9 01		lda #$01	            lda #1              ; Set the upper two bits of the bitmap창<80><99>s address
.e079	29 03		and #$03	            and #$03
.e07b	8d 03 d1	sta $d103	            sta VKY_BM0_ADDR_H  ; The and #$03 is not necessary; this is from Peter's example; this is the $1:xxxx addr

					; Set the line number to 0
					;
.e07e	64 14		stz $14		            stz line    ; store 0 in 'line' which is the starting color for the gradient hires screen
.e080	e6 14		inc $14		            inc line    ; advance it 4 colors in order to skip 000 (transparent)
.e082	e6 14		inc $14		            inc line    ; skip 001 (we use for our ligher purple color of sprites)
.e084	e6 14		inc $14		            inc line    ; skip 002 (we use for our dark purple sprite shadow)
.e086	e6 14		inc $14		            inc line    ; skip 003 (for good measure; we may use this later)

					; Calculate the bank number for the bitmap
.e088	a9 08		lda #$08	            lda #($10000 >>13)  ; bit shift 13x aka answer = 8
.e08a	85 15		sta $15		            sta bm_bank

.e08c					bank_loop:
.e08c	64 10		stz $10		            stz pointer         ; Set the pointer to start of the current bank
.e08e	a9 20		lda #$20	            lda #$20            ; starting at $2000 (page 1)
.e090	85 11		sta $11		            sta pointer+1

					; Set the column to 0
.e092	64 16		stz $16		            stz column
.e094	64 17		stz $17		            stz column+1

					; Alter the LUT entries for $2000 -> $bfff
.e096	a9 80		lda #$80	            lda #$80            ; Turn on editing of MMU LUT #0, and work off #0
.e098	85 00		sta $00		            sta MMU_MEM_CTRL
.e09a	a5 15		lda $15		            lda bm_bank
.e09c	85 09		sta $09		            sta MMU_MEM_BANK_1
.e09e	64 00		stz $00		            stz MMU_MEM_CTRL
.e0a0	a2 00		ldx #$00	            ldx #$00  ;new
.e0a2					loop2:
.e0a2	a5 14		lda $14		            lda line        ; The line number is the color of the line
.e0a4	92 10		sta ($10)	            sta (pointer)

.e0a6					inc_column:
.e0a6	e6 16		inc $16		            inc column      ; Increment the column number
.e0a8	d0 02		bne $e0ac	            bne chk_col
.e0aa	e6 17		inc $17		            inc column+1

.e0ac					chk_col:
.e0ac	a5 16		lda $16		            lda column      ; Check to see if we have finished the row
.e0ae	c9 40		cmp #$40	            cmp #<320
.e0b0	d0 1a		bne $e0cc	            bne inc_point
.e0b2	a5 17		lda $17		            lda column+1
.e0b4	c9 01		cmp #$01	            cmp #>320
.e0b6	d0 14		bne $e0cc	            bne inc_point

.e0b8	a5 14		lda $14		            lda line
.e0ba	e8		inx		            inx
.e0bb	e0 02		cpx #$02	            cpx #$02
.e0bd	d0 03		bne $e0c2	            bne ckk_bra
.e0bf	a2 00		ldx #$00	            ldx #$00
.e0c1	1a		inc a		            inc a           ; If so, increment the line number

.e0c2					ckk_bra:
.e0c2	85 14		sta $14		            sta line
.e0c4	c9 c8		cmp #$c8	            cmp #200        ; If line = 200, we창<80><99>re done
.e0c6	f0 14		beq $e0dc	            beq done
.e0c8	64 16		stz $16		            stz column      ; Set the column to 0
.e0ca	64 17		stz $17		            stz column+1

.e0cc					inc_point:
.e0cc	e6 10		inc $10		            inc pointer     ; Increment pointer
.e0ce	d0 d2		bne $e0a2	            bne loop2       ; If < $4000, keep looping
.e0d0	e6 11		inc $11		            inc pointer+1
.e0d2	a5 11		lda $11		            lda pointer+1
.e0d4	c9 40		cmp #$40	            cmp #$40
.e0d6	d0 ca		bne $e0a2	            bne loop2
.e0d8	e6 15		inc $15		            inc bm_bank     ; Move to the next bank
.e0da	80 b0		bra $e08c	            bra bank_loop   ; And start filling it

.e0dc					done:

.e0dc	20 f6 e0	jsr $e0f6	            jsr frame
.e0df	ea		nop		loop        nop             ; Lock up here
.e0e0	4c df e0	jmp $e0df	            jmp loop

					;----------------------------------------------

					; Fetch bank routine
					; given a scan line (in x register), fetch the appropriate 8K bank to $2000

.e0e3	a9 80		lda #$80	ftchbnk     lda #$80            ; Turn on editing of MMU LUT #0, and work off #0
.e0e5	85 00		sta $00		            sta MMU_MEM_CTRL
.e0e7	bd d6 e2	lda $e2d6,x	            lda bank,x          ; load value from bank table indexed by x register
.e0ea	18		clc		            clc
.e0eb	69 08		adc #$08	            adc #$08            ; add 8; therefore, 0 = 8th bank of 8192 or the 65,536th byte of memory
.e0ed	85 09		sta $09		            sta MMU_MEM_BANK_1
.e0ef	69 01		adc #$01	            adc #$01            ; importantly, we also grab the subsequent bank into $4000; this is necessary
.e0f1	85 0a		sta $0a		            sta MMU_MEM_BANK_2  ;   to solve the jagged edge scenario (see FR issue #F5, page 4 and 6 for a
.e0f3	64 00		stz $00		            stz MMU_MEM_CTRL    ;   detailed account of why this is necessary)
.e0f5	60		rts		            rts

					; Draw the boundary
					;
					; A key tenet of this scheme; column 0 is actaully the 32nd column otherwise known as address $2020
					; when banked in (or bank 8 which normally lives at $1:0000 also known as the top of the screen,
					; synomonous with the bottom of bitmap memory)
					;
					; The table is offset by hex $20 so that draws of objects in the full 'balls' demo can be accomplished
					; without any CLC; ADC; operations.  This optimization is preferred but limits the scheme since it cannot
					; 'print' pixels in positions 0..31 (and to maintain symmetry) or 192 to 319.
					;
.e0f6	a9 ff		lda #$ff	frame	    lda #COLOR1         ; constant that refers to the Purple color for the frame
.e0f8	a0 01		ldy #$01		        ldy #$01
.e0fa	20 11 e1	jsr $e111	            jsr hline           ; line on the top row

.e0fd	a0 bf		ldy #$bf	            ldy #191
.e0ff	20 11 e1	jsr $e111		        jsr hline	        ; line on the bottom row

.e102	a9 ff		lda #$ff	            lda #COLOR1
.e104	a0 00		ldy #$00	            ldy #0
.e106	20 2a e1	jsr $e12a		        jsr vline	        ; line on the left column

.e109	a9 ff		lda #$ff	            lda #COLOR1
.e10b	a0 ff		ldy #$ff		        ldy #COLUMNS-1
.e10d	20 2a e1	jsr $e12a		        jsr vline	        ; line on the right column
.e110	60		rts		            rts


					; Draw a horizontal line on all but the topmost and bottommost rows
					; A = byte (colored pixel) to write in each position
					; Y = scan line to draw on
					;
					; Uses zero page addresses gbase_lo, gbase_hi, COLOR1 is passed in via (a)ccumulator

.e111	48		pha		hline	    pha
.e112	b9 0e e2	lda $e20e,y	            lda table_lo,y
.e115	85 18		sta $18			        sta gbase_lo
.e117	b9 46 e1	lda $e146,y		        lda table_hi,y
.e11a	85 19		sta $19			        sta gbase_hi
.e11c	98		tya		            tya
.e11d	aa		tax		            tax
.e11e	20 e3 e0	jsr $e0e3	            jsr ftchbnk
.e121	a0 ff		ldy #$ff	            ldy #COLUMNS-1	    ; width of screen in bytes
.e123	68		pla		            pla
.e124	91 18		sta ($18),y	_	        sta (gbase_lo),y
.e126	88		dey		            dey
.e127	d0 fb		bne $e124		        bne _
.e129	60		rts			        rts

					; Draw a vertical line on all but the topmost and bottommost rows
					; A = byte (colored pixel) to write in each position
					; Y = column
					;
					; Uses zero page addresses gbase_lo, gbase_hi, COLOR1 is passed in via (a)ccumulator

.e12a	8d 45 e1	sta $e145	vline	    sta temp
.e12d	a2 bf		ldx #$bf		        ldx #191            ; start at second-to-last row
.e12f	bd 0e e2	lda $e20e,x	_	        lda table_lo,x      ; get the row address
.e132	85 18		sta $18			        sta gbase_lo
.e134	bd 46 e1	lda $e146,x		        lda table_hi,x
.e137	85 19		sta $19			        sta gbase_hi
.e139	20 e3 e0	jsr $e0e3	            jsr ftchbnk         ; call to ftchbnk
.e13c	ad 45 e1	lda $e145		        lda temp
.e13f	91 18		sta ($18),y		        sta (gbase_lo),y    ; write the color byte
.e141	ca		dex			        dex 	            ; previous row
.e142	d0 eb		bne $e12f		        bne _
.e144	60		rts			        rts

>e145					temp        .byte   ?

					; Tables containing high and low bytes for 200 scan lines.  They assist in targeting precise bitmap memory locations
					;
					; example: if we were looking to write to the 3rd scan line of the screen, we would load an index
					; register with 2, then grab or LDA table_hi,index and place it into a zero page address as the high byte
					; and then grab table_lo,index and place it into the adjacent (prior) zero page address (65xx CPUs are little endian).
					;
					; a write to (zeropageaddress),x will address the x'th pixel of the indexed line

.e146					table_hi
>e146	20 21 22 23 25 26 27 28		    .text x"20212223252627282a2b2c2d2f303132"
>e14e	2a 2b 2c 2d 2f 30 31 32
>e156	34 35 36 37 39 3a 3b 3c		    .text x"34353637393a3b3c3e3f202123242526"
>e15e	3e 3f 20 21 23 24 25 26
>e166	28 29 2a 2b 2d 2e 2f 30		    .text x"28292a2b2d2e2f30323334353738393a"
>e16e	32 33 34 35 37 38 39 3a
>e176	3c 3d 3e 3f 21 22 23 24		    .text x"3c3d3e3f21222324262728292b2c2d2e"
>e17e	26 27 28 29 2b 2c 2d 2e
>e186	30 31 32 33 35 36 37 38		    .text x"30313233353637383a3b3c3d3f202122"
>e18e	3a 3b 3c 3d 3f 20 21 22
>e196	24 25 26 27 29 2a 2b 2c		    .text x"24252627292a2b2c2e2f303133343536"
>e19e	2e 2f 30 31 33 34 35 36
>e1a6	38 39 3a 3b 3d 3e 3f 20		    .text x"38393a3b3d3e3f20222324252728292a"
>e1ae	22 23 24 25 27 28 29 2a
>e1b6	2c 2d 2e 2f 31 32 33 34		    .text x"2c2d2e2f31323334363738393b3c3d3e"
>e1be	36 37 38 39 3b 3c 3d 3e
>e1c6	20 21 22 23 25 26 27 28		    .text x"20212223252627282a2b2c2d2f303132"
>e1ce	2a 2b 2c 2d 2f 30 31 32
>e1d6	34 35 36 37 39 3a 3b 3c		    .text x"34353637393a3b3c3e3f202123242526"
>e1de	3e 3f 20 21 23 24 25 26
>e1e6	28 29 2a 2b 2d 2e 2f 30		    .text x"28292a2b2d2e2f30323334353738393a"
>e1ee	32 33 34 35 37 38 39 3a
>e1f6	3c 3d 3e 3f 21 22 23 24		    .text x"3c3d3e3f21222324262728292b2c2d2e"
>e1fe	26 27 28 29 2b 2c 2d 2e
>e206	30 31 32 33 35 36 37 38		    .text x"3031323335363738"

.e20e					table_lo
>e20e	20 60 a0 e0 20 60 a0 e0		    .text x"2060a0e02060a0e02060a0e02060a0e0"
>e216	20 60 a0 e0 20 60 a0 e0
>e21e	20 60 a0 e0 20 60 a0 e0		    .text x"2060a0e02060a0e02060a0e02060a0e0"
>e226	20 60 a0 e0 20 60 a0 e0
>e22e	20 60 a0 e0 20 60 a0 e0		    .text x"2060a0e02060a0e02060a0e02060a0e0"
>e236	20 60 a0 e0 20 60 a0 e0
>e23e	20 60 a0 e0 20 60 a0 e0		    .text x"2060a0e02060a0e02060a0e02060a0e0"
>e246	20 60 a0 e0 20 60 a0 e0
>e24e	20 60 a0 e0 20 60 a0 e0		    .text x"2060a0e02060a0e02060a0e02060a0e0"
>e256	20 60 a0 e0 20 60 a0 e0
>e25e	20 60 a0 e0 20 60 a0 e0		    .text x"2060a0e02060a0e02060a0e02060a0e0"
>e266	20 60 a0 e0 20 60 a0 e0
>e26e	20 60 a0 e0 20 60 a0 e0		    .text x"2060a0e02060a0e02060a0e02060a0e0"
>e276	20 60 a0 e0 20 60 a0 e0
>e27e	20 60 a0 e0 20 60 a0 e0		    .text x"2060a0e02060a0e02060a0e02060a0e0"
>e286	20 60 a0 e0 20 60 a0 e0
>e28e	20 60 a0 e0 20 60 a0 e0		    .text x"2060a0e02060a0e02060a0e02060a0e0"
>e296	20 60 a0 e0 20 60 a0 e0
>e29e	20 60 a0 e0 20 60 a0 e0		    .text x"2060a0e02060a0e02060a0e02060a0e0"
>e2a6	20 60 a0 e0 20 60 a0 e0
>e2ae	20 60 a0 e0 20 60 a0 e0		    .text x"2060a0e02060a0e02060a0e02060a0e0"
>e2b6	20 60 a0 e0 20 60 a0 e0
>e2be	20 60 a0 e0 20 60 a0 e0		    .text x"2060a0e02060a0e02060a0e02060a0e0"
>e2c6	20 60 a0 e0 20 60 a0 e0
>e2ce	20 60 a0 e0 20 60 a0 e0		    .text x"2060a0e02060a0e0"

					; The bank table is likewise a map of scan lines to memory banks.  As above, it trades memory (400 bytes)
					; for performance.  This table is used by the bankftch routine.

.e2d6					bank
>e2d6	00 00 00 00 00 00 00 00		    .text x"00000000000000000000000000000000"
>e2de	00 00 00 00 00 00 00 00
>e2e6	00 00 00 00 00 00 00 00		    .text x"00000000000000000000010101010101"
>e2ee	00 00 01 01 01 01 01 01
>e2f6	01 01 01 01 01 01 01 01		    .text x"01010101010101010101010101010101"
>e2fe	01 01 01 01 01 01 01 01
>e306	01 01 01 01 02 02 02 02		    .text x"01010101020202020202020202020202"
>e30e	02 02 02 02 02 02 02 02
>e316	02 02 02 02 02 02 02 02		    .text x"02020202020202020202020202030303"
>e31e	02 02 02 02 02 03 03 03
>e326	03 03 03 03 03 03 03 03		    .text x"03030303030303030303030303030303"
>e32e	03 03 03 03 03 03 03 03
>e336	03 03 03 03 03 03 03 04		    .text x"03030303030303040404040404040404"
>e33e	04 04 04 04 04 04 04 04
>e346	04 04 04 04 04 04 04 04		    .text x"04040404040404040404040404040404"
>e34e	04 04 04 04 04 04 04 04
>e356	05 05 05 05 05 05 05 05		    .text x"05050505050505050505050505050505"
>e35e	05 05 05 05 05 05 05 05
>e366	05 05 05 05 05 05 05 05		    .text x"05050505050505050505060606060606"
>e36e	05 05 06 06 06 06 06 06
>e376	06 06 06 06 06 06 06 06		    .text x"06060606060606060606060606060606"
>e37e	06 06 06 06 06 06 06 06
>e386	06 06 06 06 07 07 07 07		    .text x"06060606070707070707070707070707"
>e38e	07 07 07 07 07 07 07 07
>e396	07 07 07 07 07 07 07 07		    .text x"070707070707070707"
>e39e	07

					.send
					.endn

;******  End of listing
